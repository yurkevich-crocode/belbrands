/******/ (function () {
  // webpackBootstrap
  /******/ var __webpack_modules__ = {
    /***/ 63: /***/ function () {
      const brands = document.querySelector(".brands");

      const startBrands = () => {
        const addBtn = document.querySelector(".brands__add-btn");
        const brandEdits = document.querySelectorAll(".btn-edit");

        if (brandEdits) {
          const brandsInfo = document.querySelector(".brands__info");
          const brandsCross = document.querySelector(".brands__cross");

          brandEdits.forEach((el) => {
            el.addEventListener("click", () => {
              brandsInfo.classList.add("brands__info--active");
            });
          });

          brandsCross.addEventListener("click", () => {
            brandsInfo.classList.remove("brands__info--active");
          });

          const editWrapper = document.querySelector(".brands__info");

          if (editWrapper) {
            const edits = document.querySelectorAll(".btn-edit");
            const nameInput = document.getElementById("nameEdit");
            const historyEdit = document.getElementById("historyEdit");
            const imgEdit = document.getElementById("imagePreviewEdit");
            const date = document.getElementById("dateEdit");
            const categorySelect = document.getElementById("categoryEdit");
            const idBrand = document.getElementById("idBrand");
            const fileE = document.getElementById("editFile");

            edits.forEach((btn) => {
              btn.addEventListener("click", () => {
                let id = btn.getAttribute("data-id");
                let name = btn.getAttribute("data-name");
                let history = btn.getAttribute("data-history");
                let imgPath = btn.getAttribute("data-img");
                let dateFile = btn.getAttribute("data-date");
                let category = btn.getAttribute("data-category");
                let formData = new DataTransfer();

                idBrand.value = id;
                nameInput.value = name;
                historyEdit.value = history;
                imgEdit.src = imgPath;
                date.value = dateFile;

                fetch(imgEdit.src)
                  .then((res) => res.blob())
                  .then((blob) => {
                    let file = new File([blob], imgPath);
                    formData.items.add(file);

                    fileE.files = formData.files;
                  });

                for (var i = 0; i < categorySelect.options.length; i++) {
                  console.log(categorySelect.options[i].value);
                  if (categorySelect.options[i].textContent == category) {
                    categorySelect.options[i].selected = true;
                  }
                }
              });
            });
          }

          const searchbar = document.getElementById("search");

          const items = document.querySelectorAll(".brands__item");
          searchbar.addEventListener("input", (event) => {
            const searchText = event.target.value.toLowerCase();

            items.forEach((item) => {
              const itemName = item
                .querySelector(".brands__name")
                .textContent.toLowerCase();

              if (itemName.includes(searchText)) {
                item.style.display = "block";
              } else {
                item.style.display = "none";
              }
            });
          });
        }

        const deleteBtns = document.querySelectorAll(".btn-delete");
        const addWrapper = document.querySelector(".brands__info-add");
        const crossAdd = document.querySelector(".brands__cross-add");

        const fileInput = document.getElementById("fileIMG");
        const fileInputEdit = document.getElementById("editFile");

        fileInput.addEventListener("change", previewImage);
        fileInputEdit.addEventListener("change", previewImageEdit);

        function previewImageEdit() {
          const imagePreviewEdit = document.getElementById("imagePreviewEdit");

          if (editFile.files && editFile.files[0]) {
            let reader = new FileReader();

            reader.onload = function (e) {
              imagePreviewEdit.src = e.target.result;
            };

            reader.readAsDataURL(editFile.files[0]);
          } else {
            imagePreviewEdit.src = "";
          }
        }

        function previewImage() {
          const imagePreview = document.getElementById("imagePreviewAdd");

          if (fileInput.files && fileInput.files[0]) {
            let reader = new FileReader();

            reader.onload = function (e) {
              imagePreview.src = e.target.result;
            };

            reader.readAsDataURL(fileInput.files[0]);
          } else {
            imagePreview.src = "";
          }
        }

        addBtn.addEventListener("click", () => {
          addWrapper.classList.add("brands__info-add--active");
        });

        crossAdd.addEventListener("click", () => {
          addWrapper.classList.remove("brands__info-add--active");
        });

        deleteBtns.forEach((btn) => {
          btn.addEventListener("click", () => {
            const id = btn.getAttribute("data-id");

            if (id) {
              let res = confirm("Действительно хотите удалить запись?");
              if (res) {
                fetch(`php/deleteBrand.php?id=${id}`, {
                  method: "GET",
                }).then((response) => {
                  if (response.status === 200) {
                    btn.parentElement.parentElement.parentElement.style.display =
                      "none";
                  }
                });
              }
            }
          });
        });
      };

      if (brands != undefined) {
        startBrands();
      }

      /***/
    },

    /***/ 550: /***/ function () {
      const category = document.querySelector(".categories");

      const startCategory = () => {
        const addBtn = document.querySelector(".categories__add-btn");
        const categoryEdits = document.querySelectorAll(".btn-edit");

        if (category) {
          const categoryInfo = document.querySelector(".categories__info");
          const categoryCross = document.querySelector(".categories__cross");
          const deleteBtns = document.querySelectorAll(".btn-delete");
          categoryEdits.forEach((el) => {
            el.addEventListener("click", () => {
              categoryInfo.classList.add("categories__info--active");
            });
          });

          categoryCross.addEventListener("click", () => {
            categoryInfo.classList.remove("categories__info--active");
          });

          deleteBtns.forEach((btn) => {
            btn.addEventListener("click", () => {
              const id = btn.getAttribute("data-id");

              if (id) {
                let res = confirm("Действительно хотите удалить запись?");

                if (res) {
                  fetch(`php/deleteCategory.php?id=${id}`, {
                    method: "GET",
                  }).then((response) => {
                    if (response.status === 200) {
                      btn.parentElement.parentElement.parentElement.style.display =
                        "none";

                      document.remove(
                        btn.parentElement.parentElement.parentElement
                      );
                    }
                  });
                }
              }
            });
          });
        }

        const addWrapper = document.querySelector(".categories__info-add");
        const crossAdd = document.querySelector(".categories__cross-add");

        addBtn.addEventListener("click", () => {
          addWrapper.classList.add("categories__info-add--active");
        });

        crossAdd.addEventListener("click", () => {
          addWrapper.classList.remove("categories__info-add--active");
        });

        const categoryWrapper = document.querySelector(".categories__info");

        const fileInput = document.getElementById("fileAdd");
        const fileInputEdit = document.getElementById("fileEdit");

        if (categoryWrapper) {
          const edits = document.querySelectorAll(".btn-edit");
          const id = document.getElementById("idEdit");
          const name = document.getElementById("nameEdit");
          const fileImg = document.getElementById("imagePreviewEditCategory");
          const fileE = document.getElementById("fileEdit");

          edits.forEach((btn) => {
            btn.addEventListener("click", () => {
              let idItem = btn.getAttribute("data-id");
              let nameItem = btn.getAttribute("data-name");
              let imgSrc = btn.getAttribute("data-img");
              let formData = new DataTransfer();

              id.value = idItem;
              name.value = nameItem;
              fileImg.src = imgSrc;

              fetch(fileImg.src)
                .then((res) => res.blob())
                .then((blob) => {
                  let file = new File([blob], imgSrc);
                  formData.items.add(file);

                  fileE.files = formData.files;
                });
            });
          });
        }

        fileInput.addEventListener("change", previewImage);
        fileInputEdit.addEventListener("change", previewImageEdit);

        function previewImage() {
          const imagePreview = document.getElementById(
            "imagePreviewAddCategory"
          );

          if (fileInput.files && fileInput.files[0]) {
            let reader = new FileReader();

            reader.onload = function (e) {
              imagePreview.src = e.target.result;
            };

            reader.readAsDataURL(fileInput.files[0]);
          } else {
            imagePreview.src = "";
          }
        }

        function previewImageEdit() {
          const imagePreview = document.getElementById(
            "imagePreviewEditCategory"
          );

          if (fileInputEdit.files && fileInputEdit.files[0]) {
            let reader = new FileReader();

            reader.onload = function (e) {
              imagePreview.src = e.target.result;
            };

            reader.readAsDataURL(fileInputEdit.files[0]);
          } else {
            imagePreview.src = "";
          }
        }

        const searchbar = document.getElementById("search");

        const items = document.querySelectorAll(".categories__item");
        searchbar.addEventListener("input", (event) => {
          const searchText = event.target.value.toLowerCase();

          items.forEach((item) => {
            const itemName = item
              .querySelector(".categories__name")
              .textContent.toLowerCase();

            if (itemName.includes(searchText)) {
              item.style.display = "block";
            } else {
              item.style.display = "none";
            }
          });
        });
      };

      if (category != undefined) {
        startCategory();
      }

      /***/
    },

    /***/ 248: /***/ function () {
      const users = document.querySelector(".users");

      const startusers = () => {
        const usersEdits = document.querySelectorAll(".btn-edit");
        if (usersEdits) {
          const usersInfo = document.querySelector(".users__info");
          const usersCross = document.querySelector(".users__cross");

          usersEdits.forEach((el) => {
            el.addEventListener("click", () => {
              usersInfo.classList.add("users__info--active");
            });
          });

          usersCross.addEventListener("click", () => {
            usersInfo.classList.remove("users__info--active");
          });

          const users = document.querySelectorAll(".users__item");

          if (users) {
            users.forEach((user) => {
              const id = document.getElementById("idUser");
              const name = document.getElementById("userName");
              const lastName = document.getElementById("userLastName");
              const roles = document.getElementById("roleEdit");
              const editBtn = user.querySelector(".btn-edit");
              const email = document.getElementById("userEmail");
              const pass = document.getElementById("userPass");
              const curEmailUser = document.getElementById("curEmailUser");

              editBtn?.addEventListener("click", () => {
                let userId = editBtn.getAttribute("data-id");
                let nameUser = editBtn.getAttribute("data-name");
                let lastNameUser = editBtn.getAttribute("data-last");
                let roleUser = editBtn.getAttribute("data-role");
                let emailUser = editBtn.getAttribute("data-email");
                let passUser = editBtn.getAttribute("data-password");
                id.value = userId;
                name.value = nameUser;
                lastName.value = lastNameUser;
                email.value = emailUser;
                pass.value = passUser;

                if (curEmailUser.value == emailUser) {
                  roles.disabled = true;
                } else {
                  roles.disabled = false;
                }

                for (var i = 0; i < roles.options.length; i++) {
                  if (roles.options[i].textContent == roleUser) {
                    roles.options[i].selected = true;
                  }
                }
              });

              const deleteBtn = user.querySelector(".btn-delete");

              deleteBtn?.addEventListener("click", () => {
                const id = deleteBtn.getAttribute("data-id");

                if (id) {
                  let res = confirm("Действительно хотите удалить запись?");

                  if (res) {
                    fetch(`php/deleteUser.php?id=${id}`, {
                      method: "GET",
                    }).then((response) => {
                      if (response.status === 200) {
                        deleteBtn.parentElement.parentElement.parentElement.style.display =
                          "none";

                        document.remove(
                          deleteBtn.parentElement.parentElement.parentElement
                        );
                      }
                    });
                  }
                }
              });
            });
          }
        }

        const searchbar = document.getElementById("search");

        const items = document.querySelectorAll(".users__item");

        searchbar.addEventListener("input", (event) => {
          const searchText = event.target.value.toLowerCase();

          items.forEach((item) => {
            const itemName = item
              .querySelector(".users__name")
              .textContent.toLowerCase();

            if (itemName.includes(searchText)) {
              item.style.display = "block";
            } else {
              item.style.display = "none";
            }
          });
        });
      };

      if (users != undefined) {
        startusers();
      }

      /***/
    },

    /******/
  };
  /************************************************************************/
  /******/ // The module cache
  /******/ var __webpack_module_cache__ = {};
  /******/
  /******/ // The require function
  /******/ function __webpack_require__(moduleId) {
    /******/ // Check if module is in cache
    /******/ var cachedModule = __webpack_module_cache__[moduleId];
    /******/ if (cachedModule !== undefined) {
      /******/ return cachedModule.exports;
      /******/
    }
    /******/ // Create a new module (and put it into the cache)
    /******/ var module = (__webpack_module_cache__[moduleId] = {
      /******/ // no module.id needed
      /******/ // no module.loaded needed
      /******/ exports: {},
      /******/
    });
    /******/
    /******/ // Execute the module function
    /******/ __webpack_modules__[moduleId](
      module,
      module.exports,
      __webpack_require__
    );
    /******/
    /******/ // Return the exports of the module
    /******/ return module.exports;
    /******/
  }
  /******/
  /************************************************************************/
  /******/ /* webpack/runtime/compat get default export */
  /******/ !(function () {
    /******/ // getDefaultExport function for compatibility with non-harmony modules
    /******/ __webpack_require__.n = function (module) {
      /******/ var getter =
        module && module.__esModule
          ? /******/ function () {
              return module["default"];
            }
          : /******/ function () {
              return module;
            };
      /******/ __webpack_require__.d(getter, { a: getter });
      /******/ return getter;
      /******/
    };
    /******/
  })();
  /******/
  /******/ /* webpack/runtime/define property getters */
  /******/ !(function () {
    /******/ // define getter functions for harmony exports
    /******/ __webpack_require__.d = function (exports, definition) {
      /******/ for (var key in definition) {
        /******/ if (
          __webpack_require__.o(definition, key) &&
          !__webpack_require__.o(exports, key)
        ) {
          /******/ Object.defineProperty(exports, key, {
            enumerable: true,
            get: definition[key],
          });
          /******/
        }
        /******/
      }
      /******/
    };
    /******/
  })();
  /******/
  /******/ /* webpack/runtime/hasOwnProperty shorthand */
  /******/ !(function () {
    /******/ __webpack_require__.o = function (obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    };
    /******/
  })();
  /******/
  /************************************************************************/
  var __webpack_exports__ = {};
  // This entry need to be wrapped in an IIFE because it need to be in strict mode.
  !(function () {
    "use strict";
    /* harmony import */ var _brands__WEBPACK_IMPORTED_MODULE_0__ =
      __webpack_require__(63);
    /* harmony import */ var _brands__WEBPACK_IMPORTED_MODULE_0___default =
      /*#__PURE__*/ __webpack_require__.n(_brands__WEBPACK_IMPORTED_MODULE_0__);
    /* harmony import */ var _category__WEBPACK_IMPORTED_MODULE_1__ =
      __webpack_require__(550);
    /* harmony import */ var _category__WEBPACK_IMPORTED_MODULE_1___default =
      /*#__PURE__*/ __webpack_require__.n(
        _category__WEBPACK_IMPORTED_MODULE_1__
      );
    /* harmony import */ var _users__WEBPACK_IMPORTED_MODULE_2__ =
      __webpack_require__(248);
    /* harmony import */ var _users__WEBPACK_IMPORTED_MODULE_2___default =
      /*#__PURE__*/ __webpack_require__.n(_users__WEBPACK_IMPORTED_MODULE_2__);
  })();
  // This entry need to be wrapped in an IIFE because it need to be in strict mode.
  !(function () {
    "use strict";
    // extracted by mini-css-extract-plugin
  })();
  /******/
})();
